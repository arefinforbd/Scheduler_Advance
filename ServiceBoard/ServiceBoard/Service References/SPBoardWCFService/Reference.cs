//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceBoard.SPBoardWCFService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChartData", Namespace="http://schemas.datacontract.org/2004/07/SPBoardWCFService.Model")]
    [System.SerializableAttribute()]
    public partial class ChartData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AreaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateLabelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LabelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceBoard.SPBoardWCFService.ChartLegend LegendField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MTDAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuestionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SequenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YTDAmountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Area {
            get {
                return this.AreaField;
            }
            set {
                if ((object.ReferenceEquals(this.AreaField, value) != true)) {
                    this.AreaField = value;
                    this.RaisePropertyChanged("Area");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateLabel {
            get {
                return this.DateLabelField;
            }
            set {
                if ((object.ReferenceEquals(this.DateLabelField, value) != true)) {
                    this.DateLabelField = value;
                    this.RaisePropertyChanged("DateLabel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Label {
            get {
                return this.LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelField, value) != true)) {
                    this.LabelField = value;
                    this.RaisePropertyChanged("Label");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceBoard.SPBoardWCFService.ChartLegend Legend {
            get {
                return this.LegendField;
            }
            set {
                if ((object.ReferenceEquals(this.LegendField, value) != true)) {
                    this.LegendField = value;
                    this.RaisePropertyChanged("Legend");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MTDAmount {
            get {
                return this.MTDAmountField;
            }
            set {
                if ((this.MTDAmountField.Equals(value) != true)) {
                    this.MTDAmountField = value;
                    this.RaisePropertyChanged("MTDAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Point {
            get {
                return this.PointField;
            }
            set {
                if ((this.PointField.Equals(value) != true)) {
                    this.PointField = value;
                    this.RaisePropertyChanged("Point");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Question {
            get {
                return this.QuestionField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionField, value) != true)) {
                    this.QuestionField = value;
                    this.RaisePropertyChanged("Question");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Section {
            get {
                return this.SectionField;
            }
            set {
                if ((object.ReferenceEquals(this.SectionField, value) != true)) {
                    this.SectionField = value;
                    this.RaisePropertyChanged("Section");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sequence {
            get {
                return this.SequenceField;
            }
            set {
                if ((this.SequenceField.Equals(value) != true)) {
                    this.SequenceField = value;
                    this.RaisePropertyChanged("Sequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialNumber {
            get {
                return this.SerialNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialNumberField, value) != true)) {
                    this.SerialNumberField = value;
                    this.RaisePropertyChanged("SerialNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double YTDAmount {
            get {
                return this.YTDAmountField;
            }
            set {
                if ((this.YTDAmountField.Equals(value) != true)) {
                    this.YTDAmountField = value;
                    this.RaisePropertyChanged("YTDAmount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChartLegend", Namespace="http://schemas.datacontract.org/2004/07/SPBoardWCFService.Model")]
    [System.SerializableAttribute()]
    public partial class ChartLegend : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FooterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Line1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Line2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Line3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Line4Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Footer {
            get {
                return this.FooterField;
            }
            set {
                if ((object.ReferenceEquals(this.FooterField, value) != true)) {
                    this.FooterField = value;
                    this.RaisePropertyChanged("Footer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Line1 {
            get {
                return this.Line1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Line1Field, value) != true)) {
                    this.Line1Field = value;
                    this.RaisePropertyChanged("Line1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Line2 {
            get {
                return this.Line2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Line2Field, value) != true)) {
                    this.Line2Field = value;
                    this.RaisePropertyChanged("Line2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Line3 {
            get {
                return this.Line3Field;
            }
            set {
                if ((object.ReferenceEquals(this.Line3Field, value) != true)) {
                    this.Line3Field = value;
                    this.RaisePropertyChanged("Line3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Line4 {
            get {
                return this.Line4Field;
            }
            set {
                if ((object.ReferenceEquals(this.Line4Field, value) != true)) {
                    this.Line4Field = value;
                    this.RaisePropertyChanged("Line4");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/SPBoardWCFService.Model")]
    [System.SerializableAttribute()]
    public partial class Category : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SequenceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sequence {
            get {
                return this.SequenceField;
            }
            set {
                if ((this.SequenceField.Equals(value) != true)) {
                    this.SequenceField = value;
                    this.RaisePropertyChanged("Sequence");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SPBoardWCFService.ISPBoardWCFService")]
    public interface ISPBoardWCFService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISPBoardWCFService/Login", ReplyAction="http://tempuri.org/ISPBoardWCFService/LoginResponse")]
        ServiceBoard.SPBoardWCFService.LoginResponse Login(ServiceBoard.SPBoardWCFService.LoginRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISPBoardWCFService/Login", ReplyAction="http://tempuri.org/ISPBoardWCFService/LoginResponse")]
        System.Threading.Tasks.Task<ServiceBoard.SPBoardWCFService.LoginResponse> LoginAsync(ServiceBoard.SPBoardWCFService.LoginRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISPBoardWCFService/GetSalesAnalysis", ReplyAction="http://tempuri.org/ISPBoardWCFService/GetSalesAnalysisResponse")]
        System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.ChartData> GetSalesAnalysis(string CompanyID, string CompanyPassword, int Level4ID, int ReportType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISPBoardWCFService/GetSalesAnalysis", ReplyAction="http://tempuri.org/ISPBoardWCFService/GetSalesAnalysisResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.ChartData>> GetSalesAnalysisAsync(string CompanyID, string CompanyPassword, int Level4ID, int ReportType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISPBoardWCFService/GetSalesAnalysisByCategorySum", ReplyAction="http://tempuri.org/ISPBoardWCFService/GetSalesAnalysisByCategorySumResponse")]
        System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.ChartData> GetSalesAnalysisByCategorySum(string CompanyID, string CompanyPassword, int Level4ID, int ReportType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISPBoardWCFService/GetSalesAnalysisByCategorySum", ReplyAction="http://tempuri.org/ISPBoardWCFService/GetSalesAnalysisByCategorySumResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.ChartData>> GetSalesAnalysisByCategorySumAsync(string CompanyID, string CompanyPassword, int Level4ID, int ReportType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISPBoardWCFService/GetSalesAnalysisByCategoryDetail", ReplyAction="http://tempuri.org/ISPBoardWCFService/GetSalesAnalysisByCategoryDetailResponse")]
        System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.ChartData> GetSalesAnalysisByCategoryDetail(string CompanyID, string CompanyPassword, int Level4ID, string Category, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISPBoardWCFService/GetSalesAnalysisByCategoryDetail", ReplyAction="http://tempuri.org/ISPBoardWCFService/GetSalesAnalysisByCategoryDetailResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.ChartData>> GetSalesAnalysisByCategoryDetailAsync(string CompanyID, string CompanyPassword, int Level4ID, string Category, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISPBoardWCFService/GetDebtorAnalysis", ReplyAction="http://tempuri.org/ISPBoardWCFService/GetDebtorAnalysisResponse")]
        System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.ChartData> GetDebtorAnalysis(string CompanyID, string CompanyPassword, int Level4ID, string InvoiceType, decimal CustomerFrom, decimal CustomerTo, int SortBy, string Area, bool PrintCredit, string NameFrom, string NameTo, int AgeBal, bool UnIndJobs, System.DateTime BalanceDate, bool Retention);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISPBoardWCFService/GetDebtorAnalysis", ReplyAction="http://tempuri.org/ISPBoardWCFService/GetDebtorAnalysisResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.ChartData>> GetDebtorAnalysisAsync(string CompanyID, string CompanyPassword, int Level4ID, string InvoiceType, decimal CustomerFrom, decimal CustomerTo, int SortBy, string Area, bool PrintCredit, string NameFrom, string NameTo, int AgeBal, bool UnIndJobs, System.DateTime BalanceDate, bool Retention);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISPBoardWCFService/GetCategory", ReplyAction="http://tempuri.org/ISPBoardWCFService/GetCategoryResponse")]
        System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.Category> GetCategory(string CompanyID, string CompanyPassword, int Level4ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISPBoardWCFService/GetCategory", ReplyAction="http://tempuri.org/ISPBoardWCFService/GetCategoryResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.Category>> GetCategoryAsync(string CompanyID, string CompanyPassword, int Level4ID);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Login", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class LoginRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string CompanyID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string CompanyPassword;
        
        public LoginRequest() {
        }
        
        public LoginRequest(string CompanyID, string CompanyPassword) {
            this.CompanyID = CompanyID;
            this.CompanyPassword = CompanyPassword;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LoginResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class LoginResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool LoginResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int Level4ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string Message;
        
        public LoginResponse() {
        }
        
        public LoginResponse(bool LoginResult, int Level4ID, string Message) {
            this.LoginResult = LoginResult;
            this.Level4ID = Level4ID;
            this.Message = Message;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISPBoardWCFServiceChannel : ServiceBoard.SPBoardWCFService.ISPBoardWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SPBoardWCFServiceClient : System.ServiceModel.ClientBase<ServiceBoard.SPBoardWCFService.ISPBoardWCFService>, ServiceBoard.SPBoardWCFService.ISPBoardWCFService {
        
        public SPBoardWCFServiceClient() {
        }
        
        public SPBoardWCFServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SPBoardWCFServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SPBoardWCFServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SPBoardWCFServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ServiceBoard.SPBoardWCFService.LoginResponse ServiceBoard.SPBoardWCFService.ISPBoardWCFService.Login(ServiceBoard.SPBoardWCFService.LoginRequest request) {
            return base.Channel.Login(request);
        }
        
        public bool Login(string CompanyID, string CompanyPassword, out int Level4ID, out string Message) {
            ServiceBoard.SPBoardWCFService.LoginRequest inValue = new ServiceBoard.SPBoardWCFService.LoginRequest();
            inValue.CompanyID = CompanyID;
            inValue.CompanyPassword = CompanyPassword;
            ServiceBoard.SPBoardWCFService.LoginResponse retVal = ((ServiceBoard.SPBoardWCFService.ISPBoardWCFService)(this)).Login(inValue);
            Level4ID = retVal.Level4ID;
            Message = retVal.Message;
            return retVal.LoginResult;
        }
        
        public System.Threading.Tasks.Task<ServiceBoard.SPBoardWCFService.LoginResponse> LoginAsync(ServiceBoard.SPBoardWCFService.LoginRequest request) {
            return base.Channel.LoginAsync(request);
        }
        
        public System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.ChartData> GetSalesAnalysis(string CompanyID, string CompanyPassword, int Level4ID, int ReportType) {
            return base.Channel.GetSalesAnalysis(CompanyID, CompanyPassword, Level4ID, ReportType);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.ChartData>> GetSalesAnalysisAsync(string CompanyID, string CompanyPassword, int Level4ID, int ReportType) {
            return base.Channel.GetSalesAnalysisAsync(CompanyID, CompanyPassword, Level4ID, ReportType);
        }
        
        public System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.ChartData> GetSalesAnalysisByCategorySum(string CompanyID, string CompanyPassword, int Level4ID, int ReportType) {
            return base.Channel.GetSalesAnalysisByCategorySum(CompanyID, CompanyPassword, Level4ID, ReportType);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.ChartData>> GetSalesAnalysisByCategorySumAsync(string CompanyID, string CompanyPassword, int Level4ID, int ReportType) {
            return base.Channel.GetSalesAnalysisByCategorySumAsync(CompanyID, CompanyPassword, Level4ID, ReportType);
        }
        
        public System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.ChartData> GetSalesAnalysisByCategoryDetail(string CompanyID, string CompanyPassword, int Level4ID, string Category, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetSalesAnalysisByCategoryDetail(CompanyID, CompanyPassword, Level4ID, Category, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.ChartData>> GetSalesAnalysisByCategoryDetailAsync(string CompanyID, string CompanyPassword, int Level4ID, string Category, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetSalesAnalysisByCategoryDetailAsync(CompanyID, CompanyPassword, Level4ID, Category, FromDate, ToDate);
        }
        
        public System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.ChartData> GetDebtorAnalysis(string CompanyID, string CompanyPassword, int Level4ID, string InvoiceType, decimal CustomerFrom, decimal CustomerTo, int SortBy, string Area, bool PrintCredit, string NameFrom, string NameTo, int AgeBal, bool UnIndJobs, System.DateTime BalanceDate, bool Retention) {
            return base.Channel.GetDebtorAnalysis(CompanyID, CompanyPassword, Level4ID, InvoiceType, CustomerFrom, CustomerTo, SortBy, Area, PrintCredit, NameFrom, NameTo, AgeBal, UnIndJobs, BalanceDate, Retention);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.ChartData>> GetDebtorAnalysisAsync(string CompanyID, string CompanyPassword, int Level4ID, string InvoiceType, decimal CustomerFrom, decimal CustomerTo, int SortBy, string Area, bool PrintCredit, string NameFrom, string NameTo, int AgeBal, bool UnIndJobs, System.DateTime BalanceDate, bool Retention) {
            return base.Channel.GetDebtorAnalysisAsync(CompanyID, CompanyPassword, Level4ID, InvoiceType, CustomerFrom, CustomerTo, SortBy, Area, PrintCredit, NameFrom, NameTo, AgeBal, UnIndJobs, BalanceDate, Retention);
        }
        
        public System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.Category> GetCategory(string CompanyID, string CompanyPassword, int Level4ID) {
            return base.Channel.GetCategory(CompanyID, CompanyPassword, Level4ID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceBoard.SPBoardWCFService.Category>> GetCategoryAsync(string CompanyID, string CompanyPassword, int Level4ID) {
            return base.Channel.GetCategoryAsync(CompanyID, CompanyPassword, Level4ID);
        }
    }
}
