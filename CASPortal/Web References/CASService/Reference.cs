//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18408.
// 
#pragma warning disable 1591

namespace CASPortal.CASService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CASWebServiceSoap", Namespace="http://tempuri.org/")]
    public partial class CASWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LoginProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginMessageOfDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrivateFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublicFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrivateFolderFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublicFolderFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrivateFileInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublicFileInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBusinessTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScheduledTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCategoryProductServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerSiteOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CASWebService() {
            this.Url = global::CASPortal.Properties.Settings.Default.CASPortal_CASService_CASWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoginProcessCompletedEventHandler LoginProcessCompleted;
        
        /// <remarks/>
        public event LoginMessageOfDayCompletedEventHandler LoginMessageOfDayCompleted;
        
        /// <remarks/>
        public event GetPrivateFoldersCompletedEventHandler GetPrivateFoldersCompleted;
        
        /// <remarks/>
        public event GetPublicFoldersCompletedEventHandler GetPublicFoldersCompleted;
        
        /// <remarks/>
        public event GetPrivateFolderFilesCompletedEventHandler GetPrivateFolderFilesCompleted;
        
        /// <remarks/>
        public event GetPublicFolderFilesCompletedEventHandler GetPublicFolderFilesCompleted;
        
        /// <remarks/>
        public event GetPrivateFileInfoCompletedEventHandler GetPrivateFileInfoCompleted;
        
        /// <remarks/>
        public event GetPublicFileInfoCompletedEventHandler GetPublicFileInfoCompleted;
        
        /// <remarks/>
        public event GetBusinessTimeCompletedEventHandler GetBusinessTimeCompleted;
        
        /// <remarks/>
        public event GetScheduledTimeCompletedEventHandler GetScheduledTimeCompleted;
        
        /// <remarks/>
        public event GetCategoryProductServiceCompletedEventHandler GetCategoryProductServiceCompleted;
        
        /// <remarks/>
        public event GetCustomerSiteCompletedEventHandler GetCustomerSiteCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoginProcess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LoginProcess(string CompanyID, string CompanyPassword, string CustomerID, string CustomerPassword, out int lvl4id) {
            object[] results = this.Invoke("LoginProcess", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerID,
                        CustomerPassword});
            lvl4id = ((int)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LoginProcessAsync(string CompanyID, string CompanyPassword, string CustomerID, string CustomerPassword) {
            this.LoginProcessAsync(CompanyID, CompanyPassword, CustomerID, CustomerPassword, null);
        }
        
        /// <remarks/>
        public void LoginProcessAsync(string CompanyID, string CompanyPassword, string CustomerID, string CustomerPassword, object userState) {
            if ((this.LoginProcessOperationCompleted == null)) {
                this.LoginProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginProcessOperationCompleted);
            }
            this.InvokeAsync("LoginProcess", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerID,
                        CustomerPassword}, this.LoginProcessOperationCompleted, userState);
        }
        
        private void OnLoginProcessOperationCompleted(object arg) {
            if ((this.LoginProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginProcessCompleted(this, new LoginProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoginMessageOfDay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoginMessageOfDay(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string CustomerID) {
            object[] results = this.Invoke("LoginMessageOfDay", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID,
                        CustomerID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LoginMessageOfDayAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string CustomerID) {
            this.LoginMessageOfDayAsync(CompanyID, CompanyPassword, CustomerPassword, Level4ID, CustomerID, null);
        }
        
        /// <remarks/>
        public void LoginMessageOfDayAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string CustomerID, object userState) {
            if ((this.LoginMessageOfDayOperationCompleted == null)) {
                this.LoginMessageOfDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginMessageOfDayOperationCompleted);
            }
            this.InvokeAsync("LoginMessageOfDay", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID,
                        CustomerID}, this.LoginMessageOfDayOperationCompleted, userState);
        }
        
        private void OnLoginMessageOfDayOperationCompleted(object arg) {
            if ((this.LoginMessageOfDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginMessageOfDayCompleted(this, new LoginMessageOfDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPrivateFolders", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPrivateFolders(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string CustomerID) {
            object[] results = this.Invoke("GetPrivateFolders", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID,
                        CustomerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrivateFoldersAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string CustomerID) {
            this.GetPrivateFoldersAsync(CompanyID, CompanyPassword, CustomerPassword, Level4ID, CustomerID, null);
        }
        
        /// <remarks/>
        public void GetPrivateFoldersAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string CustomerID, object userState) {
            if ((this.GetPrivateFoldersOperationCompleted == null)) {
                this.GetPrivateFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrivateFoldersOperationCompleted);
            }
            this.InvokeAsync("GetPrivateFolders", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID,
                        CustomerID}, this.GetPrivateFoldersOperationCompleted, userState);
        }
        
        private void OnGetPrivateFoldersOperationCompleted(object arg) {
            if ((this.GetPrivateFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrivateFoldersCompleted(this, new GetPrivateFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPublicFolders", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPublicFolders(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID) {
            object[] results = this.Invoke("GetPublicFolders", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPublicFoldersAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID) {
            this.GetPublicFoldersAsync(CompanyID, CompanyPassword, CustomerPassword, Level4ID, null);
        }
        
        /// <remarks/>
        public void GetPublicFoldersAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, object userState) {
            if ((this.GetPublicFoldersOperationCompleted == null)) {
                this.GetPublicFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublicFoldersOperationCompleted);
            }
            this.InvokeAsync("GetPublicFolders", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID}, this.GetPublicFoldersOperationCompleted, userState);
        }
        
        private void OnGetPublicFoldersOperationCompleted(object arg) {
            if ((this.GetPublicFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublicFoldersCompleted(this, new GetPublicFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPrivateFolderFiles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPrivateFolderFiles(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string CustomerID, string FolderName, string TimeZoneOffset) {
            object[] results = this.Invoke("GetPrivateFolderFiles", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID,
                        CustomerID,
                        FolderName,
                        TimeZoneOffset});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrivateFolderFilesAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string CustomerID, string FolderName, string TimeZoneOffset) {
            this.GetPrivateFolderFilesAsync(CompanyID, CompanyPassword, CustomerPassword, Level4ID, CustomerID, FolderName, TimeZoneOffset, null);
        }
        
        /// <remarks/>
        public void GetPrivateFolderFilesAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string CustomerID, string FolderName, string TimeZoneOffset, object userState) {
            if ((this.GetPrivateFolderFilesOperationCompleted == null)) {
                this.GetPrivateFolderFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrivateFolderFilesOperationCompleted);
            }
            this.InvokeAsync("GetPrivateFolderFiles", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID,
                        CustomerID,
                        FolderName,
                        TimeZoneOffset}, this.GetPrivateFolderFilesOperationCompleted, userState);
        }
        
        private void OnGetPrivateFolderFilesOperationCompleted(object arg) {
            if ((this.GetPrivateFolderFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrivateFolderFilesCompleted(this, new GetPrivateFolderFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPublicFolderFiles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPublicFolderFiles(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string FolderName, string TimeZoneOffset) {
            object[] results = this.Invoke("GetPublicFolderFiles", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID,
                        FolderName,
                        TimeZoneOffset});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPublicFolderFilesAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string FolderName, string TimeZoneOffset) {
            this.GetPublicFolderFilesAsync(CompanyID, CompanyPassword, CustomerPassword, Level4ID, FolderName, TimeZoneOffset, null);
        }
        
        /// <remarks/>
        public void GetPublicFolderFilesAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string FolderName, string TimeZoneOffset, object userState) {
            if ((this.GetPublicFolderFilesOperationCompleted == null)) {
                this.GetPublicFolderFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublicFolderFilesOperationCompleted);
            }
            this.InvokeAsync("GetPublicFolderFiles", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID,
                        FolderName,
                        TimeZoneOffset}, this.GetPublicFolderFilesOperationCompleted, userState);
        }
        
        private void OnGetPublicFolderFilesOperationCompleted(object arg) {
            if ((this.GetPublicFolderFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublicFolderFilesCompleted(this, new GetPublicFolderFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPrivateFileInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPrivateFileInfo(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string CustomerID, string FolderName, string FileName) {
            object[] results = this.Invoke("GetPrivateFileInfo", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID,
                        CustomerID,
                        FolderName,
                        FileName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrivateFileInfoAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string CustomerID, string FolderName, string FileName) {
            this.GetPrivateFileInfoAsync(CompanyID, CompanyPassword, CustomerPassword, Level4ID, CustomerID, FolderName, FileName, null);
        }
        
        /// <remarks/>
        public void GetPrivateFileInfoAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string CustomerID, string FolderName, string FileName, object userState) {
            if ((this.GetPrivateFileInfoOperationCompleted == null)) {
                this.GetPrivateFileInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrivateFileInfoOperationCompleted);
            }
            this.InvokeAsync("GetPrivateFileInfo", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID,
                        CustomerID,
                        FolderName,
                        FileName}, this.GetPrivateFileInfoOperationCompleted, userState);
        }
        
        private void OnGetPrivateFileInfoOperationCompleted(object arg) {
            if ((this.GetPrivateFileInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrivateFileInfoCompleted(this, new GetPrivateFileInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPublicFileInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPublicFileInfo(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string FolderName, string FileName) {
            object[] results = this.Invoke("GetPublicFileInfo", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID,
                        FolderName,
                        FileName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPublicFileInfoAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string FolderName, string FileName) {
            this.GetPublicFileInfoAsync(CompanyID, CompanyPassword, CustomerPassword, Level4ID, FolderName, FileName, null);
        }
        
        /// <remarks/>
        public void GetPublicFileInfoAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, string FolderName, string FileName, object userState) {
            if ((this.GetPublicFileInfoOperationCompleted == null)) {
                this.GetPublicFileInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublicFileInfoOperationCompleted);
            }
            this.InvokeAsync("GetPublicFileInfo", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID,
                        FolderName,
                        FileName}, this.GetPublicFileInfoOperationCompleted, userState);
        }
        
        private void OnGetPublicFileInfoOperationCompleted(object arg) {
            if ((this.GetPublicFileInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublicFileInfoCompleted(this, new GetPublicFileInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBusinessTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetBusinessTime(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID) {
            object[] results = this.Invoke("GetBusinessTime", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetBusinessTimeAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID) {
            this.GetBusinessTimeAsync(CompanyID, CompanyPassword, CustomerPassword, Level4ID, null);
        }
        
        /// <remarks/>
        public void GetBusinessTimeAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, object userState) {
            if ((this.GetBusinessTimeOperationCompleted == null)) {
                this.GetBusinessTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBusinessTimeOperationCompleted);
            }
            this.InvokeAsync("GetBusinessTime", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID}, this.GetBusinessTimeOperationCompleted, userState);
        }
        
        private void OnGetBusinessTimeOperationCompleted(object arg) {
            if ((this.GetBusinessTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBusinessTimeCompleted(this, new GetBusinessTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetScheduledTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetScheduledTime(string CompanyID, string CompanyPassword, string CustomerPassword, System.DateTime startDate) {
            object[] results = this.Invoke("GetScheduledTime", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        startDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetScheduledTimeAsync(string CompanyID, string CompanyPassword, string CustomerPassword, System.DateTime startDate) {
            this.GetScheduledTimeAsync(CompanyID, CompanyPassword, CustomerPassword, startDate, null);
        }
        
        /// <remarks/>
        public void GetScheduledTimeAsync(string CompanyID, string CompanyPassword, string CustomerPassword, System.DateTime startDate, object userState) {
            if ((this.GetScheduledTimeOperationCompleted == null)) {
                this.GetScheduledTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScheduledTimeOperationCompleted);
            }
            this.InvokeAsync("GetScheduledTime", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        startDate}, this.GetScheduledTimeOperationCompleted, userState);
        }
        
        private void OnGetScheduledTimeOperationCompleted(object arg) {
            if ((this.GetScheduledTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScheduledTimeCompleted(this, new GetScheduledTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCategoryProductService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCategoryProductService(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID) {
            object[] results = this.Invoke("GetCategoryProductService", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCategoryProductServiceAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID) {
            this.GetCategoryProductServiceAsync(CompanyID, CompanyPassword, CustomerPassword, Level4ID, null);
        }
        
        /// <remarks/>
        public void GetCategoryProductServiceAsync(string CompanyID, string CompanyPassword, string CustomerPassword, int Level4ID, object userState) {
            if ((this.GetCategoryProductServiceOperationCompleted == null)) {
                this.GetCategoryProductServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCategoryProductServiceOperationCompleted);
            }
            this.InvokeAsync("GetCategoryProductService", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        Level4ID}, this.GetCategoryProductServiceOperationCompleted, userState);
        }
        
        private void OnGetCategoryProductServiceOperationCompleted(object arg) {
            if ((this.GetCategoryProductServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCategoryProductServiceCompleted(this, new GetCategoryProductServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerSite", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCustomerSite(string CompanyID, string CompanyPassword, string CustomerPassword, string CustomerID, int Level4ID) {
            object[] results = this.Invoke("GetCustomerSite", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        CustomerID,
                        Level4ID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerSiteAsync(string CompanyID, string CompanyPassword, string CustomerPassword, string CustomerID, int Level4ID) {
            this.GetCustomerSiteAsync(CompanyID, CompanyPassword, CustomerPassword, CustomerID, Level4ID, null);
        }
        
        /// <remarks/>
        public void GetCustomerSiteAsync(string CompanyID, string CompanyPassword, string CustomerPassword, string CustomerID, int Level4ID, object userState) {
            if ((this.GetCustomerSiteOperationCompleted == null)) {
                this.GetCustomerSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerSiteOperationCompleted);
            }
            this.InvokeAsync("GetCustomerSite", new object[] {
                        CompanyID,
                        CompanyPassword,
                        CustomerPassword,
                        CustomerID,
                        Level4ID}, this.GetCustomerSiteOperationCompleted, userState);
        }
        
        private void OnGetCustomerSiteOperationCompleted(object arg) {
            if ((this.GetCustomerSiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerSiteCompleted(this, new GetCustomerSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LoginProcessCompletedEventHandler(object sender, LoginProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int lvl4id {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LoginMessageOfDayCompletedEventHandler(object sender, LoginMessageOfDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginMessageOfDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginMessageOfDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetPrivateFoldersCompletedEventHandler(object sender, GetPrivateFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrivateFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrivateFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetPublicFoldersCompletedEventHandler(object sender, GetPublicFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPublicFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPublicFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetPrivateFolderFilesCompletedEventHandler(object sender, GetPrivateFolderFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrivateFolderFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrivateFolderFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetPublicFolderFilesCompletedEventHandler(object sender, GetPublicFolderFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPublicFolderFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPublicFolderFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetPrivateFileInfoCompletedEventHandler(object sender, GetPrivateFileInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrivateFileInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrivateFileInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetPublicFileInfoCompletedEventHandler(object sender, GetPublicFileInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPublicFileInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPublicFileInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetBusinessTimeCompletedEventHandler(object sender, GetBusinessTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBusinessTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBusinessTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetScheduledTimeCompletedEventHandler(object sender, GetScheduledTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScheduledTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScheduledTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCategoryProductServiceCompletedEventHandler(object sender, GetCategoryProductServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCategoryProductServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCategoryProductServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCustomerSiteCompletedEventHandler(object sender, GetCustomerSiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591